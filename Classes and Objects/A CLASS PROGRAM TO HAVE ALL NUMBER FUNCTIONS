/CLASS FUNCTION OF 1D ARRAY
#include<iostream.h>
#include<conio.h>
#include<process.h>
class num1D
{
 int no[100];
 int n;
 public:
  num1D();
  num1D(int*,int);
  num1D(num1D&);
  ~num1D();
  void input();
  void disp();
  int lsearch(int);
  int bsearch();
  void bubble();
  void selecD();
  void insertA();
  void insert();
  void Delete();
  void mergeAAA(num1D,num1D);
  void mergeADD(num1D,num1D);
};
num1D::num1D()
{
 n=100;
 for(int i=0;i<100;i++)
  no[i]=0;
}
num1D::num1D(int A[],int a)
{
 n=a;
 for(int i=0;i<n;i++)
  no[i]=A[i];
}
num1D::num1D(num1D &N)
{
 n=N.n;
 for(int i=0;i<n;i++)
  no[i]=N.no[i];
}
num1D::~num1D()
{
 cout<<"\nOBJECT IS DESTROYED.";
}
void num1D::input()
{
 cout<<"\nENTER THE NUMBER OF RECORDS YOU WANT TO INSERT: ";
 cin>>n;
 for(int i=0;i<n;i++)
 {
  cout<<"\nENTER "<<i+1<<" RECORD: ";
  cin>>no[i];
 }
}
void num1D::disp()
{
 cout<<"\nYOUR RECORDS: \n";
 for(int i=0;i<n;i++)
  cout<<no[i]<<" , ";
}
int num1D::lsearch(int item)
{
 int pos=-1,i;
 for(i=0;i<n;i++)
 {
  if(item==no[i])
  {
   pos=i;
   break;
  }
 }
 return(pos);
}
void num1D::bubble()
{
 int i,a,j,flag;
 for(i=1;i<n;i++)
 {
  flag=1;
  for(j=0;j<n-i;j++)
  {
   if(no[j]>no[j+1])
   {
    a=no[j];
    no[j]=no[j+1];
    no[j+1]=a;
    flag=0;
   }
  }
 if(flag==1)
  break;
 }
}
void num1D::selecD()
{
 int max,temp,pos,i,j;
 for(i=0;i<n-1;i++)
 {
  max=no[i];
  pos=i;
  for(j=i+1;j<n;j++)
  {
   if(no[j]>max)
   {
    max=no[j];
    pos=j;
   }
  }
  if(i!=pos)
  {
   temp=no[i];
   no[i]=no[pos];
   no[pos]=temp;
  }
 }
}
void num1D::insertA()
{
 int i,j,temp;
 for(i=1;i<n;i++)
 {
  temp=no[i];
  for(j=i-1;j>=0 && temp<no[j];j--)
   no[j+1]=no[j];
  no[j+1]=temp;
 }
}
int num1D::bsearch()
{
 int pos=-1,b=0,l=n-1,m,item;
 cout<<"\nENTER THE NUMBER YOU WANT TO SEARCH: ";
 cin>>item;
 do
 {
  m=(b+l)/2;
  if(no[m]==item)
  {
   pos=m;
   break;
  }
  else
   if(item>no[m])//2nd half
    b=m+1;
   else //1st half
    l=m-1;
 }while(b<=l);
 return(pos);
}
void num1D::insert()
{
 if(n==100)
 {
  cout<<"\nOVERFLOW.NO MORE INSERTIONS.";
  getch();
  return;
 }
 int i,item;
 cout<<"\nENTER THE NUMBER YOU WANT TO INSERT: ";
 cin>>item;
 for(i=n-1;i>=0 && item<no[i];i--)
  no[i+1]=no[i];
 no[i+1]=item;
 n++;
 cout<<"\nITEM INSERTED.";
}
void num1D::Delete()
{
 int pos=-1,i,item;
 cout<<"\nENTER THE NUMBER YOU WANT TO DELETE FROM THE ARRAY: ";
 cin>>item;
 for(i=0;i<n;i++)
 {
  if(no[i]==item)
  {
   pos=i;
   break;
  }
 }
 if(pos==-1)
 {
  cout<<"\nTHE ENTER NUMBER IS NOT IN THE ARRAY.";
  getch();
  return;
 }
 for(i=pos;i<n;i++)
  no[i]=no[i+1];
 no[n-1]=0;
 n--;
 cout<<"\nELEMENT DELETED.";
}
void num1D::mergeAAA(num1D A,num1D B)
{
 n=A.n+B.n;
 int i=0,j=0,k=0;
 while(i<A.n && j<B.n)
 {
  if(A.no[i]<B.no[i])
   no[k++]=A.no[i++];
  else
   no[k++]=B.no[j++];
 }
 while(i<A.n)
  no[k++]=A.no[i++];
 while(j<B.n)
 no[k++]=B.no[j++];
}
void num1D::mergeADD(num1D A,num1D B)
{
 n=A.n+B.n;
 int i=A.n-1,j=0,k=0;
 while(i>=0 && j<B.n)
 {
  if(A.no[i]>B.no[j])
   no[k++]=A.no[i--];
  else
   no[k++]=B.no[j++];
 }
 while(i>=0)
  no[k++]=A.no[i--];
 while(j<B.n)
  no[k++]=B.no[j++];
}
void main()
{
 clrscr();
 num1D A,B,C;
 int ch,ans,item;
 do
 {
  clrscr();
  cout<<"\nCLASS 1D ARRAY: ";
  cout<<"\n1.DISPLAY THE ARRAY.";
  cout<<"\n2.LINEAR SEARCH.";
  cout<<"\n3.BINARY SEARCH.";
  cout<<"\n4.BUBBLE SORTING IN ASCENDING ORDER.";
  cout<<"\n5.SELECTION SORTING IN DECENDING ORDER.";
  cout<<"\n6.INSERTION SORTING IN ASCENDING ORDER.";
  cout<<"\n7.INSERTING A NEW NUMBER.";
  cout<<"\n8.DELETING A NUMBER FROM THE ARRAY.";
  cout<<"\n9.MERGING TWO ASCENDING ARRAYS INTO NEW ASCENDING ARRAY.";
  cout<<"\n10.MERGING ONE ASCENDING AND ONE DESCENDING INTO NEW DESCENDING ARRAY.";
  cout<<"\n0.TO EXIT.";
  cout<<"\nENTER YOUR CHOICE: ";
  cin>>ch;
  switch(ch)
  {
   case 0 ://exit
    exit(0);
    break;
   case 1 ://display
    A.input();
    A.disp();
    break;
   case 2 ://linear search
    A.input();
    cout<<"\nENTER THE NUMBER YOU WANT TO SEARCH: ";
    cin>>item;
    ans=A.lsearch(item);
    if(ans==-1)
     cout<<"\nNOT FOUND!!";
    else
     cout<<"\nFOUND AT "<<ans+1<<"th POSITION.";
    break;
   case 3 ://bsearch
    A.input();
    A.bubble();
    ans=A.bsearch();
    if(ans==-1)
     cout<<"\nNOT FOUND!!";
    else
     cout<<"\nFOUND AT "<<ans+1<<"th POSITION.";
    break;
   case 4 ://bubble sort
    A.input();
    cout<<"\nORIGINAL ARRAY: ";
    A.disp();
    A.bubble();
    cout<<"\nSORTED ARRAY: ";
    A.disp();
    break;
   case 5 ://select sort
    A.input();
    cout<<"\nORIGINAL ARRAY: ";
    A.disp();
    A.selecD();
    cout<<"\nSORTED ARRAY: ";
    A.disp();
    break;
   case 6 ://insert sort
    A.input();
    cout<<"\nORIGINAL ARRAY: ";
    A.disp();
    A.insertA();
    cout<<"\nSORTED ARRAY: ";
    A.disp();
    break;
   case 7 ://insert a no.
    A.input();
    A.insert();
    A.bubble();
    A.disp();
    break;
   case 8 ://delect a no.
    A.input();
    A.Delete();
    A.bubble();
    A.disp();
    break;
   case 9 ://merge aaa
    A.input();
    B.input();
    A.bubble();
    B.bubble();
    C.mergeAAA(A,B);
    C.bubble();
    C.disp();
    break;
   case 10 ://merge add
     A.input();
     B.input();
     A.bubble();
     B.bubble();
     C.mergeADD(A,B);
     C.bubble();
     C.disp();
     break;
   default :cout<<"\nENTER THE CHOICE FROM 0 TO 10.";
  }
  getch();
 }while(1);
}
